// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	jobs "github.com/B3rs/gork/jobs"
	gomock "github.com/golang/mock/gomock"
)

// MockJobsStore is a mock of JobsStore interface.
type MockJobsStore struct {
	ctrl     *gomock.Controller
	recorder *MockJobsStoreMockRecorder
}

// MockJobsStoreMockRecorder is the mock recorder for MockJobsStore.
type MockJobsStoreMockRecorder struct {
	mock *MockJobsStore
}

// NewMockJobsStore creates a new mock instance.
func NewMockJobsStore(ctrl *gomock.Controller) *MockJobsStore {
	mock := &MockJobsStore{ctrl: ctrl}
	mock.recorder = &MockJobsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobsStore) EXPECT() *MockJobsStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockJobsStore) Create(ctx context.Context, job jobs.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobsStoreMockRecorder) Create(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobsStore)(nil).Create), ctx, job)
}

// Deschedule mocks base method.
func (m *MockJobsStore) Deschedule(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deschedule", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deschedule indicates an expected call of Deschedule.
func (mr *MockJobsStoreMockRecorder) Deschedule(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deschedule", reflect.TypeOf((*MockJobsStore)(nil).Deschedule), ctx, id)
}

// Get mocks base method.
func (m *MockJobsStore) Get(ctx context.Context, id string) (jobs.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(jobs.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockJobsStoreMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockJobsStore)(nil).Get), ctx, id)
}

// ScheduleNow mocks base method.
func (m *MockJobsStore) ScheduleNow(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleNow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleNow indicates an expected call of ScheduleNow.
func (mr *MockJobsStoreMockRecorder) ScheduleNow(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleNow", reflect.TypeOf((*MockJobsStore)(nil).ScheduleNow), ctx, id)
}

// Search mocks base method.
func (m *MockJobsStore) Search(ctx context.Context, limit, offset int, search string) ([]jobs.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, limit, offset, search)
	ret0, _ := ret[0].([]jobs.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockJobsStoreMockRecorder) Search(ctx, limit, offset, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockJobsStore)(nil).Search), ctx, limit, offset, search)
}

// Update mocks base method.
func (m *MockJobsStore) Update(ctx context.Context, job jobs.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockJobsStoreMockRecorder) Update(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockJobsStore)(nil).Update), ctx, job)
}
