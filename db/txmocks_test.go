// Code generated by MockGen. DO NOT EDIT.
// Source: tx.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	jobs "github.com/B3rs/gork/jobs"
	gomock "github.com/golang/mock/gomock"
)

// MockTxStore is a mock of TxStore interface.
type MockTxStore struct {
	ctrl     *gomock.Controller
	recorder *MockTxStoreMockRecorder
}

// MockTxStoreMockRecorder is the mock recorder for MockTxStore.
type MockTxStoreMockRecorder struct {
	mock *MockTxStore
}

// NewMockTxStore creates a new mock instance.
func NewMockTxStore(ctrl *gomock.Controller) *MockTxStore {
	mock := &MockTxStore{ctrl: ctrl}
	mock.recorder = &MockTxStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxStore) EXPECT() *MockTxStoreMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTxStore) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxStoreMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxStore)(nil).Commit))
}

// Create mocks base method.
func (m *MockTxStore) Create(ctx context.Context, job jobs.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTxStoreMockRecorder) Create(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTxStore)(nil).Create), ctx, job)
}

// Deschedule mocks base method.
func (m *MockTxStore) Deschedule(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deschedule", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deschedule indicates an expected call of Deschedule.
func (mr *MockTxStoreMockRecorder) Deschedule(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deschedule", reflect.TypeOf((*MockTxStore)(nil).Deschedule), ctx, id)
}

// Get mocks base method.
func (m *MockTxStore) Get(ctx context.Context, id string) (jobs.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(jobs.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTxStoreMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTxStore)(nil).Get), ctx, id)
}

// ScheduleNow mocks base method.
func (m *MockTxStore) ScheduleNow(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleNow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleNow indicates an expected call of ScheduleNow.
func (mr *MockTxStoreMockRecorder) ScheduleNow(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleNow", reflect.TypeOf((*MockTxStore)(nil).ScheduleNow), ctx, id)
}

// Search mocks base method.
func (m *MockTxStore) Search(ctx context.Context, limit, offset int, search string) ([]jobs.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, limit, offset, search)
	ret0, _ := ret[0].([]jobs.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockTxStoreMockRecorder) Search(ctx, limit, offset, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockTxStore)(nil).Search), ctx, limit, offset, search)
}

// Update mocks base method.
func (m *MockTxStore) Update(ctx context.Context, job jobs.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTxStoreMockRecorder) Update(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTxStore)(nil).Update), ctx, job)
}
