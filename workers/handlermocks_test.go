// Code generated by MockGen. DO NOT EDIT.
// Source: handler_test.go

// Package workers is a generated GoMock package.
package workers

import (
	context "context"
	reflect "reflect"

	jobs "github.com/B3rs/gork/jobs"
	gomock "github.com/golang/mock/gomock"
)

// MockfailWorker is a mock of failWorker interface.
type MockfailWorker struct {
	ctrl     *gomock.Controller
	recorder *MockfailWorkerMockRecorder
}

// MockfailWorkerMockRecorder is the mock recorder for MockfailWorker.
type MockfailWorkerMockRecorder struct {
	mock *MockfailWorker
}

// NewMockfailWorker creates a new mock instance.
func NewMockfailWorker(ctrl *gomock.Controller) *MockfailWorker {
	mock := &MockfailWorker{ctrl: ctrl}
	mock.recorder = &MockfailWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfailWorker) EXPECT() *MockfailWorkerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockfailWorker) Execute(ctx context.Context, job jobs.Job) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockfailWorkerMockRecorder) Execute(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockfailWorker)(nil).Execute), ctx, job)
}

// OnFailure mocks base method.
func (m *MockfailWorker) OnFailure(arg0 context.Context, arg1 jobs.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnFailure", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnFailure indicates an expected call of OnFailure.
func (mr *MockfailWorkerMockRecorder) OnFailure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFailure", reflect.TypeOf((*MockfailWorker)(nil).OnFailure), arg0, arg1)
}
