// Code generated by MockGen. DO NOT EDIT.
// Source: tx.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	jobs "github.com/B3rs/gork/jobs"
	gomock "github.com/golang/mock/gomock"
)

// MockTxClient is a mock of TxClient interface.
type MockTxClient struct {
	ctrl     *gomock.Controller
	recorder *MockTxClientMockRecorder
}

// MockTxClientMockRecorder is the mock recorder for MockTxClient.
type MockTxClientMockRecorder struct {
	mock *MockTxClient
}

// NewMockTxClient creates a new mock instance.
func NewMockTxClient(ctrl *gomock.Controller) *MockTxClient {
	mock := &MockTxClient{ctrl: ctrl}
	mock.recorder = &MockTxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxClient) EXPECT() *MockTxClientMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockTxClient) Cancel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockTxClientMockRecorder) Cancel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockTxClient)(nil).Cancel), ctx, id)
}

// Get mocks base method.
func (m *MockTxClient) Get(ctx context.Context, id string) (jobs.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(jobs.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTxClientMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTxClient)(nil).Get), ctx, id)
}

// Schedule mocks base method.
func (m *MockTxClient) Schedule(ctx context.Context, id, queueName string, arguments interface{}, options ...OptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, queueName, arguments}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Schedule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockTxClientMockRecorder) Schedule(ctx, id, queueName, arguments interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, queueName, arguments}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockTxClient)(nil).Schedule), varargs...)
}

// ScheduleNow mocks base method.
func (m *MockTxClient) ScheduleNow(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleNow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleNow indicates an expected call of ScheduleNow.
func (mr *MockTxClientMockRecorder) ScheduleNow(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleNow", reflect.TypeOf((*MockTxClient)(nil).ScheduleNow), ctx, id)
}

// MockdbTx is a mock of dbTx interface.
type MockdbTx struct {
	ctrl     *gomock.Controller
	recorder *MockdbTxMockRecorder
}

// MockdbTxMockRecorder is the mock recorder for MockdbTx.
type MockdbTxMockRecorder struct {
	mock *MockdbTx
}

// NewMockdbTx creates a new mock instance.
func NewMockdbTx(ctrl *gomock.Controller) *MockdbTx {
	mock := &MockdbTx{ctrl: ctrl}
	mock.recorder = &MockdbTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbTx) EXPECT() *MockdbTxMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockdbTx) Create(ctx context.Context, job jobs.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockdbTxMockRecorder) Create(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockdbTx)(nil).Create), ctx, job)
}

// Deschedule mocks base method.
func (m *MockdbTx) Deschedule(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deschedule", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deschedule indicates an expected call of Deschedule.
func (mr *MockdbTxMockRecorder) Deschedule(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deschedule", reflect.TypeOf((*MockdbTx)(nil).Deschedule), ctx, id)
}

// Get mocks base method.
func (m *MockdbTx) Get(ctx context.Context, id string) (jobs.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(jobs.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockdbTxMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockdbTx)(nil).Get), ctx, id)
}

// ScheduleNow mocks base method.
func (m *MockdbTx) ScheduleNow(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleNow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleNow indicates an expected call of ScheduleNow.
func (mr *MockdbTxMockRecorder) ScheduleNow(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleNow", reflect.TypeOf((*MockdbTx)(nil).ScheduleNow), ctx, id)
}
